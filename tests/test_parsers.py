import pytest

from quac_core.dsl import DefaultParser, DSLSyntaxError
from quac_core.dsl.models.symbols.nonterminals import (
    ActionArgSymbol,
    ActionSymbol,
    BlockSymbol,
    ConditionExprSymbol,
    ConditionFactorSymbol,
    ConditionSymbol,
    ConditionTermSymbol,
    ElifStatementSymbol,
    ExpressionSymbol,
    FactorSymbol,
    IfStatementSymbol,
    ListArgSymbol,
    ListSymbol,
    OperandSymbol,
    TermSymbol,
)
from quac_core.dsl.models.symbols.terminals import (
    BoolLiteral,
    CommaLiteral,
    ElifLiteral,
    ElseLiteral,
    FloatLiteral,
    GreaterThanLiteral,
    IfLiteral,
    IntegerLiteral,
    LeftParenthesisLiteral,
    LeftSquareBracketLiteral,
    MinusLiteral,
    MultLiteral,
    PlusLiteral,
    ReturnLiteral,
    RightParenthesisLiteral,
    RightSquareBracketLiteral,
    ThenLiteral,
    VariableSymbol,
)

return_string = "RETURN("


class TestParserParse:
    """Test DefaultParser.parse."""

    def test_simple_if_statement(self):
        parser = DefaultParser()
        tokens = [
            IfLiteral("IF"),
            VariableSymbol("a"),
            PlusLiteral("+"),
            IntegerLiteral("2"),
            GreaterThanLiteral(">"),
            IntegerLiteral("3"),
            ThenLiteral("THEN"),
            ReturnLiteral(return_string),
            IntegerLiteral("3"),
            RightParenthesisLiteral(")"),
        ]
        assert parser.parse(tokens) == [
            BlockSymbol(
                [
                    IfStatementSymbol(
                        [
                            IfLiteral("IF"),
                            ConditionExprSymbol(
                                [
                                    ConditionTermSymbol(
                                        [
                                            ConditionFactorSymbol(
                                                [
                                                    ConditionSymbol(
                                                        [
                                                            ExpressionSymbol(
                                                                [
                                                                    TermSymbol(
                                                                        [
                                                                            FactorSymbol(
                                                                                [
                                                                                    OperandSymbol(
                                                                                        [
                                                                                            VariableSymbol(
                                                                                                "a"
                                                                                            )
                                                                                        ]
                                                                                    )
                                                                                ]
                                                                            )
                                                                        ]
                                                                    ),
                                                                    PlusLiteral("+"),
                                                                    ExpressionSymbol(
                                                                        [
                                                                            TermSymbol(
                                                                                [
                                                                                    FactorSymbol(
                                                                                        [
                                                                                            OperandSymbol(
                                                                                                [
                                                                                                    IntegerLiteral(
                                                                                                        "2"
                                                                                                    )
                                                                                                ]
                                                                                            )
                                                                                        ]
                                                                                    )
                                                                                ]
                                                                            )
                                                                        ]
                                                                    ),
                                                                ]
                                                            ),
                                                            GreaterThanLiteral(">"),
                                                            ConditionSymbol(
                                                                [
                                                                    ExpressionSymbol(
                                                                        [
                                                                            TermSymbol(
                                                                                [
                                                                                    FactorSymbol(
                                                                                        [
                                                                                            OperandSymbol(
                                                                                                [
                                                                                                    IntegerLiteral(
                                                                                                        "3"
                                                                                                    )
                                                                                                ]
                                                                                            )
                                                                                        ]
                                                                                    )
                                                                                ]
                                                                            )
                                                                        ]
                                                                    )
                                                                ]
                                                            ),
                                                        ]
                                                    )
                                                ]
                                            )
                                        ]
                                    )
                                ]
                            ),
                            ThenLiteral("THEN"),
                            ActionSymbol(
                                [
                                    ReturnLiteral(return_string),
                                    OperandSymbol([IntegerLiteral("3")]),
                                    RightParenthesisLiteral(")"),
                                ]
                            ),
                        ]
                    )
                ]
            )
        ]

    def test_parenthesis(self):
        parser = DefaultParser()
        tokens = [
            IfLiteral("IF"),
            LeftParenthesisLiteral("("),
            VariableSymbol("a"),
            PlusLiteral("+"),
            IntegerLiteral("2"),
            RightParenthesisLiteral(")"),
            MultLiteral("*"),
            FloatLiteral("3.4"),
            GreaterThanLiteral(">"),
            IntegerLiteral("3"),
            ThenLiteral("THEN"),
            ReturnLiteral(return_string),
            IntegerLiteral("3"),
            RightParenthesisLiteral(")"),
        ]
        assert parser.parse(tokens) == [
            BlockSymbol(
                [
                    IfStatementSymbol(
                        [
                            IfLiteral("IF"),
                            ConditionExprSymbol(
                                [
                                    ConditionTermSymbol(
                                        [
                                            ConditionFactorSymbol(
                                                [
                                                    ConditionSymbol(
                                                        [
                                                            ExpressionSymbol(
                                                                [
                                                                    TermSymbol(
                                                                        [
                                                                            FactorSymbol(
                                                                                [
                                                                                    LeftParenthesisLiteral(
                                                                                        "("
                                                                                    ),
                                                                                    ConditionSymbol(
                                                                                        [
                                                                                            ExpressionSymbol(
                                                                                                [
                                                                                                    TermSymbol(
                                                                                                        [
                                                                                                            FactorSymbol(
                                                                                                                [
                                                                                                                    OperandSymbol(
                                                                                                                        [
                                                                                                                            VariableSymbol(
                                                                                                                                "a"
                                                                                                                            )
                                                                                                                        ]
                                                                                                                    )
                                                                                                                ]
                                                                                                            )
                                                                                                        ]
                                                                                                    ),
                                                                                                    PlusLiteral(
                                                                                                        "+"
                                                                                                    ),
                                                                                                    ExpressionSymbol(
                                                                                                        [
                                                                                                            TermSymbol(
                                                                                                                [
                                                                                                                    FactorSymbol(
                                                                                                                        [
                                                                                                                            OperandSymbol(
                                                                                                                                [
                                                                                                                                    IntegerLiteral(
                                                                                                                                        "2"
                                                                                                                                    )
                                                                                                                                ]
                                                                                                                            )
                                                                                                                        ]
                                                                                                                    )
                                                                                                                ]
                                                                                                            )
                                                                                                        ]
                                                                                                    ),
                                                                                                ]
                                                                                            )
                                                                                        ]
                                                                                    ),
                                                                                    RightParenthesisLiteral(
                                                                                        ")"
                                                                                    ),
                                                                                ]
                                                                            ),
                                                                            MultLiteral(
                                                                                "*"
                                                                            ),
                                                                            ExpressionSymbol(
                                                                                [
                                                                                    TermSymbol(
                                                                                        [
                                                                                            FactorSymbol(
                                                                                                [
                                                                                                    OperandSymbol(
                                                                                                        [
                                                                                                            FloatLiteral(
                                                                                                                "3.4"
                                                                                                            )
                                                                                                        ]
                                                                                                    )
                                                                                                ]
                                                                                            )
                                                                                        ]
                                                                                    )
                                                                                ]
                                                                            ),
                                                                        ]
                                                                    )
                                                                ]
                                                            ),
                                                            GreaterThanLiteral(">"),
                                                            ConditionSymbol(
                                                                [
                                                                    ExpressionSymbol(
                                                                        [
                                                                            TermSymbol(
                                                                                [
                                                                                    FactorSymbol(
                                                                                        [
                                                                                            OperandSymbol(
                                                                                                [
                                                                                                    IntegerLiteral(
                                                                                                        "3"
                                                                                                    )
                                                                                                ]
                                                                                            )
                                                                                        ]
                                                                                    )
                                                                                ]
                                                                            )
                                                                        ]
                                                                    )
                                                                ]
                                                            ),
                                                        ]
                                                    )
                                                ]
                                            )
                                        ]
                                    )
                                ]
                            ),
                            ThenLiteral("THEN"),
                            ActionSymbol(
                                [
                                    ReturnLiteral(return_string),
                                    OperandSymbol([IntegerLiteral("3")]),
                                    RightParenthesisLiteral(")"),
                                ]
                            ),
                        ]
                    )
                ]
            )
        ]

    def test_no_condition(self):
        parser = DefaultParser()
        tokens = [IfLiteral("IF"), ThenLiteral("THEN")]
        with pytest.raises(DSLSyntaxError):
            assert parser.parse(tokens)

    def test_elif_else_statement(self):
        parser = DefaultParser()
        tokens = [
            IfLiteral("IF"),
            IntegerLiteral("1"),
            GreaterThanLiteral(">"),
            IntegerLiteral("2"),
            ThenLiteral("THEN"),
            ReturnLiteral(return_string),
            IntegerLiteral("3"),
            RightParenthesisLiteral(")"),
            ElifLiteral("ELIF"),
            IntegerLiteral("8"),
            GreaterThanLiteral(">"),
            FloatLiteral("6.7"),
            ThenLiteral("THEN"),
            ReturnLiteral(return_string),
            IntegerLiteral("9"),
            RightParenthesisLiteral(")"),
            ElseLiteral("ElSE"),
            ReturnLiteral(return_string),
            IntegerLiteral("10"),
            RightParenthesisLiteral(")"),
        ]
        assert parser.parse(tokens) == [
            BlockSymbol(
                [
                    IfStatementSymbol(
                        [
                            IfLiteral("IF"),
                            ConditionExprSymbol(
                                [
                                    ConditionTermSymbol(
                                        [
                                            ConditionFactorSymbol(
                                                [
                                                    ConditionSymbol(
                                                        [
                                                            ExpressionSymbol(
                                                                [
                                                                    TermSymbol(
                                                                        [
                                                                            FactorSymbol(
                                                                                [
                                                                                    OperandSymbol(
                                                                                        [
                                                                                            IntegerLiteral(
                                                                                                "1"
                                                                                            )
                                                                                        ]
                                                                                    )
                                                                                ]
                                                                            )
                                                                        ]
                                                                    )
                                                                ]
                                                            ),
                                                            GreaterThanLiteral(">"),
                                                            ConditionSymbol(
                                                                [
                                                                    ExpressionSymbol(
                                                                        [
                                                                            TermSymbol(
                                                                                [
                                                                                    FactorSymbol(
                                                                                        [
                                                                                            OperandSymbol(
                                                                                                [
                                                                                                    IntegerLiteral(
                                                                                                        "2"
                                                                                                    )
                                                                                                ]
                                                                                            )
                                                                                        ]
                                                                                    )
                                                                                ]
                                                                            )
                                                                        ]
                                                                    )
                                                                ]
                                                            ),
                                                        ]
                                                    )
                                                ]
                                            )
                                        ]
                                    )
                                ]
                            ),
                            ThenLiteral("THEN"),
                            ActionSymbol(
                                [
                                    ReturnLiteral(return_string),
                                    OperandSymbol([IntegerLiteral("3")]),
                                    RightParenthesisLiteral(")"),
                                ]
                            ),
                            ElifStatementSymbol(
                                [
                                    ElifLiteral("ELIF"),
                                    ConditionExprSymbol(
                                        [
                                            ConditionTermSymbol(
                                                [
                                                    ConditionFactorSymbol(
                                                        [
                                                            ConditionSymbol(
                                                                [
                                                                    ExpressionSymbol(
                                                                        [
                                                                            TermSymbol(
                                                                                [
                                                                                    FactorSymbol(
                                                                                        [
                                                                                            OperandSymbol(
                                                                                                [
                                                                                                    IntegerLiteral(
                                                                                                        "8"
                                                                                                    )
                                                                                                ]
                                                                                            )
                                                                                        ]
                                                                                    )
                                                                                ]
                                                                            )
                                                                        ]
                                                                    ),
                                                                    GreaterThanLiteral(
                                                                        ">"
                                                                    ),
                                                                    ConditionSymbol(
                                                                        [
                                                                            ExpressionSymbol(
                                                                                [
                                                                                    TermSymbol(
                                                                                        [
                                                                                            FactorSymbol(
                                                                                                [
                                                                                                    OperandSymbol(
                                                                                                        [
                                                                                                            FloatLiteral(
                                                                                                                "6.7"
                                                                                                            )
                                                                                                        ]
                                                                                                    )
                                                                                                ]
                                                                                            )
                                                                                        ]
                                                                                    )
                                                                                ]
                                                                            )
                                                                        ]
                                                                    ),
                                                                ]
                                                            )
                                                        ]
                                                    )
                                                ]
                                            )
                                        ]
                                    ),
                                    ThenLiteral("THEN"),
                                    ActionSymbol(
                                        [
                                            ReturnLiteral(return_string),
                                            OperandSymbol([IntegerLiteral("9")]),
                                            RightParenthesisLiteral(")"),
                                        ]
                                    ),
                                    ElifStatementSymbol(
                                        [
                                            ElseLiteral("ElSE"),
                                            ActionSymbol(
                                                [
                                                    ReturnLiteral(return_string),
                                                    OperandSymbol(
                                                        [IntegerLiteral("10")]
                                                    ),
                                                    RightParenthesisLiteral(")"),
                                                ]
                                            ),
                                        ]
                                    ),
                                ]
                            ),
                        ]
                    )
                ]
            )
        ]

    def test_multiple_if_statements(self):
        parser = DefaultParser()
        tokens = [
            IfLiteral("IF"),
            BoolLiteral("FALSE"),
            ThenLiteral("THEN"),
            ReturnLiteral(return_string),
            IntegerLiteral("3"),
            RightParenthesisLiteral(")"),
            IfLiteral("IF"),
            BoolLiteral("TRUE"),
            ThenLiteral("THEN"),
            ReturnLiteral(return_string),
            IntegerLiteral("5"),
            RightParenthesisLiteral(")"),
        ]
        assert parser.parse(tokens) == [
            BlockSymbol(
                [
                    IfStatementSymbol(
                        [
                            IfLiteral("IF"),
                            ConditionExprSymbol(
                                [
                                    ConditionTermSymbol(
                                        [ConditionFactorSymbol([BoolLiteral("FALSE")])]
                                    )
                                ]
                            ),
                            ThenLiteral("THEN"),
                            ActionSymbol(
                                [
                                    ReturnLiteral(return_string),
                                    OperandSymbol([IntegerLiteral("3")]),
                                    RightParenthesisLiteral(")"),
                                ]
                            ),
                        ]
                    ),
                    BlockSymbol(
                        [
                            IfStatementSymbol(
                                [
                                    IfLiteral("IF"),
                                    ConditionExprSymbol(
                                        [
                                            ConditionTermSymbol(
                                                [
                                                    ConditionFactorSymbol(
                                                        [BoolLiteral("TRUE")]
                                                    )
                                                ]
                                            )
                                        ]
                                    ),
                                    ThenLiteral("THEN"),
                                    ActionSymbol(
                                        [
                                            ReturnLiteral(return_string),
                                            OperandSymbol([IntegerLiteral("5")]),
                                            RightParenthesisLiteral(")"),
                                        ]
                                    ),
                                ]
                            )
                        ]
                    ),
                ]
            )
        ]

    def test_expression_start_symbol(self):
        parser = DefaultParser()
        tokens = [IntegerLiteral("2"), PlusLiteral("+"), IntegerLiteral("3")]
        assert parser.parse(tokens, start_symbol=ConditionExprSymbol()) == [
            ConditionExprSymbol(
                [
                    ConditionTermSymbol(
                        [
                            ConditionFactorSymbol(
                                [
                                    ConditionSymbol(
                                        [
                                            ExpressionSymbol(
                                                [
                                                    TermSymbol(
                                                        [
                                                            FactorSymbol(
                                                                [
                                                                    OperandSymbol(
                                                                        [
                                                                            IntegerLiteral(
                                                                                "2"
                                                                            )
                                                                        ]
                                                                    )
                                                                ]
                                                            )
                                                        ]
                                                    ),
                                                    PlusLiteral("+"),
                                                    ExpressionSymbol(
                                                        [
                                                            TermSymbol(
                                                                [
                                                                    FactorSymbol(
                                                                        [
                                                                            OperandSymbol(
                                                                                [
                                                                                    IntegerLiteral(
                                                                                        "3"
                                                                                    )
                                                                                ]
                                                                            )
                                                                        ]
                                                                    )
                                                                ]
                                                            )
                                                        ]
                                                    ),
                                                ]
                                            )
                                        ]
                                    )
                                ]
                            )
                        ]
                    )
                ]
            )
        ]

    def test_simple_expression(self):
        parser = DefaultParser()
        tokens = [IntegerLiteral("2"), MinusLiteral("-"), IntegerLiteral("1")]
        assert parser.parse(tokens, start_symbol=ExpressionSymbol()) == [
            ExpressionSymbol(
                [
                    TermSymbol([FactorSymbol([OperandSymbol([IntegerLiteral("2")])])]),
                    MinusLiteral("-"),
                    ExpressionSymbol(
                        [
                            TermSymbol(
                                [FactorSymbol([OperandSymbol([IntegerLiteral("1")])])]
                            )
                        ]
                    ),
                ]
            )
        ]

    def test_multi_arg_action(self):
        parser = DefaultParser()
        tokens = [
            IfLiteral("IF"),
            BoolLiteral("TRUE"),
            ThenLiteral("THEN"),
            ReturnLiteral(return_string),
            IntegerLiteral("1"),
            CommaLiteral(","),
            IntegerLiteral("2"),
            CommaLiteral(","),
            IntegerLiteral("3"),
            RightParenthesisLiteral(")"),
        ]
        assert parser.parse(tokens, start_symbol=IfStatementSymbol()) == [
            IfStatementSymbol(
                [
                    IfLiteral("IF"),
                    ConditionExprSymbol(
                        [
                            ConditionTermSymbol(
                                [ConditionFactorSymbol([BoolLiteral("TRUE")])]
                            )
                        ]
                    ),
                    ThenLiteral("THEN"),
                    ActionSymbol(
                        [
                            ReturnLiteral(return_string),
                            OperandSymbol([IntegerLiteral("1")]),
                            ActionArgSymbol(
                                [
                                    CommaLiteral(","),
                                    OperandSymbol([IntegerLiteral("2")]),
                                    ActionArgSymbol(
                                        [
                                            CommaLiteral(","),
                                            OperandSymbol([IntegerLiteral("3")]),
                                            RightParenthesisLiteral(")"),
                                        ]
                                    ),
                                ]
                            ),
                        ]
                    ),
                ]
            )
        ]

    def test_action_with_list(self):
        parser = DefaultParser()
        tokens = [
            IfLiteral("IF"),
            BoolLiteral("TRUE"),
            ThenLiteral("THEN"),
            ReturnLiteral(return_string),
            LeftSquareBracketLiteral("["),
            IntegerLiteral("1"),
            CommaLiteral(","),
            IntegerLiteral("2"),
            CommaLiteral(","),
            IntegerLiteral("3"),
            RightSquareBracketLiteral("]"),
            CommaLiteral(","),
            BoolLiteral("FALSE"),
            RightParenthesisLiteral(")"),
        ]
        assert parser.parse(tokens) == [
            BlockSymbol(
                [
                    IfStatementSymbol(
                        [
                            IfLiteral("IF"),
                            ConditionExprSymbol(
                                [
                                    ConditionTermSymbol(
                                        [ConditionFactorSymbol([BoolLiteral("TRUE")])]
                                    )
                                ]
                            ),
                            ThenLiteral("THEN"),
                            ActionSymbol(
                                [
                                    ReturnLiteral(return_string),
                                    OperandSymbol(
                                        [
                                            ListSymbol(
                                                [
                                                    LeftSquareBracketLiteral("["),
                                                    OperandSymbol(
                                                        [IntegerLiteral("1")]
                                                    ),
                                                    ListArgSymbol(
                                                        [
                                                            CommaLiteral(","),
                                                            OperandSymbol(
                                                                [IntegerLiteral("2")]
                                                            ),
                                                            ListArgSymbol(
                                                                [
                                                                    CommaLiteral(","),
                                                                    OperandSymbol(
                                                                        [
                                                                            IntegerLiteral(
                                                                                "3"
                                                                            )
                                                                        ]
                                                                    ),
                                                                    RightSquareBracketLiteral(
                                                                        "]"
                                                                    ),
                                                                ]
                                                            ),
                                                        ]
                                                    ),
                                                ]
                                            )
                                        ]
                                    ),
                                    ActionArgSymbol(
                                        [
                                            CommaLiteral(","),
                                            OperandSymbol([BoolLiteral("FALSE")]),
                                            RightParenthesisLiteral(")"),
                                        ]
                                    ),
                                ]
                            ),
                        ]
                    )
                ]
            )
        ]
